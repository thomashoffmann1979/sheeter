#!/usr/bin/env node

var fs = require('fs'),
    program = require('commander'),
    pjson = require('../package.json'),
    sheeter_utils= require('../lib/utils/utils'),
    XLSXWriter = require('../lib/writer/xlsxwriter').XLSXWriter,
    //XLSXReader = require('../lib/reader/xlsxreader').XLSXReader,
    path =  require('path'),
    sheeter,
    filename,
    sheetname,
    startTime,
    readline = require('readline'),
    Sheeter = require('../lib/main').Sheeter,
    rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });


var exdendedHelp = function(){
    var examples = [];
    examples.push( '  Examples:');
    examples.push( '    $ '+program._name+' myfile.xlsx');
    examples.push( '    \tOpen the file, calculate all formulas inside and display the sheet list (if more than one sheet is inside) or');
    examples.push( '    \tshow the content of the only sheet.');
    examples.push( '');
    examples.push( '    $ '+program._name+' -i myfile.xlsx');
    examples.push( '    \tSame as above, but no formula will be calculated.');
    examples.push( '');
    examples.push( '    $ '+program._name+' myfile.xlsx "Table 1"');
    examples.push( '    \tDisplays the content of the sheet "Table 1".');
    examples.push( '');
    examples.push( '  Note:');
    examples.push( '    If your sheet names contain any none-ascii charactes, you should use double qoutes.');
    examples.push( '');
    console.log(examples.join("\n"));
}

program
    .version(pjson.version)
    .description('Spreadsheet in your console')
    .usage('[options] <file> [sheet]')
    .option('-i, --inactive', 'Don\'t calculate any formulas')
    .option('-f, --full', 'Display the full column width.')
    .option('-e, --edit', 'enable Edit-Mode')
    .option('-t, --time', 'Display the elapsed time.')
    .on('--help', exdendedHelp)
    .parse(process.argv);


var interActive = function(opt){
    if (typeof opt.sheetName == 'undefined'){
        var list = opt.wb.getSheetList();
        if (list.length == 1){
            opt.sheetName = list[0].title;
        }
    }
        
    if ( (typeof opt.show != 'undefined') && ( opt.show === true) ){
        opt.wb.output({
            sheet: opt.sheetName,
            full: opt.displayFull
        });
    }
    
    if ( (typeof opt.help != 'undefined') && ( opt.help === true) ){
        var help = [
            ['exit','exits the program'],
            ['show','show the current sheet'],
            ['list','list all sheets'],
            ['save <filename>','save the workbook'],
            ['use <sheet>','change the current sheet'],
            ['<id> = <value>','set the value for the cell (ie. a1=123)'],
            ['<id> := <formula>','set the formula for the cell (ie. a2:=b1+b3)']
        ];
        for( var i in help ){
            console.log('   ',sheeter_utils.alignString(help[i][0],'l',20),sheeter_utils.alignString(help[i][1],'l',50));
        }
    }
    
    rl.question(((typeof opt.sheetName == 'undefined')?'':opt.sheetName)+">", function(answer) {
        
        var keyword = "",
            argument = "",
            pos=0,
            state = -1,
            c,
            literal,
            operand,
            term,
            sh,
            cell;
        while (pos<answer.length){
            c = answer.charAt(pos);
            switch(c){
                case ':':
                case '=':
                    if (state == 0){
                        argument+=c;
                        state = 1;
                    }else{
                        if (state == 1){
                            argument+=c;
                        }else{
                            state = 0;
                            keyword+=c;
                        }
                    }
                    break;
                case ' ':
                    if (state == -1){

                    }else if (state == 0){
                        state = 1;
                    }else if (state == 1){
                        argument+=c;
                    }
                    break;
                case '"':
                    if (state == 1){

                    }
                    break;
                default:
                    if (state == 1){
                        argument+=c;
                    }else if (state == 0){
                        keyword+=c;
                    }else if (state == -1){
                        state = 0;
                        keyword+=c;
                    }
                    break;
            }
            pos+=1;
        }
        
        switch (keyword){
            case "help":
                interActive({ wb:opt.wb,help:true,sheetName: opt.sheetName,displayFull: opt.displayFull});
                break;
            case "show":
                interActive({ wb:opt.wb,show:true,sheetName: opt.sheetName,displayFull: opt.displayFull});
                break;
                
            case "save":

                if (typeof argument !== 'undefined'){
                    try{
                        var writer = new XLSXWriter({
                            filename: argument,
                            workbook: opt.wb
                        });
                        writer.save();
                    }catch(e){
                        console.log(e);
                    }
                }else{
                    console.log('Invalid filename.');
                }

                
                interActive({ wb:opt.wb,show:false,sheetName: opt.sheetName,displayFull: opt.displayFull});
                break;
                
            case "list":
                var list = opt.wb.getSheetList();
                for(var i in list){
                    console.log(list[i].title);
                }
                interActive({ wb:opt.wb,sheetName: opt.sheetName,displayFull: opt.displayFull});
                break;
            case "use":
                if (typeof argument !== 'undefined'){
                    try{
                        sh = opt.wb.getWorkSheet(argument);
                        interActive({ wb:opt.wb,show:true,sheetName: sh.title,displayFull: opt.displayFull});
                    }catch(e){
                        console.log('The sheet',argument,'was not found.');
                        interActive({ wb:opt.wb,sheetName: opt.sheetName,displayFull: opt.displayFull});
                    }
                }
                break;
            case "exit":
                process.exit();
                break;
            default:

                pos = argument.indexOf('=');
                operand =  argument.substring(0,pos+1).replace(/^\s/,'').replace(/\s$/,'');
                term =  argument.substring(pos+1).replace(/^\s/,'').replace(/\s$/,'');
                if (typeof opt.sheetName!='undefined'){
                    try{

                        if(sheeter_utils.isCellNotation(keyword)){
                            opt.show=true;
                            if(operand == ':='){
                                sh = opt.wb.getWorkSheet(opt.sheetName);
                                cell = sh.getCell(keyword);
                                cell.formula = term;
                            }else{
                                sh = opt.wb.getWorkSheet(opt.sheetName);
                                cell = sh.getCell(keyword);
                                cell.value = term;
                            }
                        }
                    }catch(e){
                        console.log('could not understand the command');
                    }
                }
                interActive(opt);
        }
    });
}


if ( (program.args.length >0 ) && (program.args.length < 3) ){
    
    startTime = (new Date()).getTime();
    
    try{
        sheeter = new Sheeter();
        sheeter.on('opened',function(wb){
            var list = wb.getSheetList();
            wb.output({
                sheet: program.args[1],
                full: program.full
            });
            
            if (program.time){
                console.log( ((new Date()).getTime()-startTime)/1000+"s");
            }
            
            if (program.edit){
                interActive({
                    wb: wb,
                    sheetName: program.args[1],
                    displayFull: program.full
                });
            }else{
                process.exit();
            }
        });
        sheeter.open(program.args[0],(typeof program.inactive=='undefined'));
    }catch(err){
        console.log('sheeter.js:54',err)
    }
}else{
    program.help()
}

